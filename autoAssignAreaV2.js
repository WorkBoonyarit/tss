const isDev = require('./isDev');
const { dbArea, dbAreaOpens, exCludeArea, dbStaffLeave, dbStaffArea, dbStaff } = isDev ? require('./data') : require('./dataFull');
const moment = require('moment');
const lodash = require('lodash');
const { getAreaTime, getVidStaff } = require('./helper');

module.exports = (autoStopResult) => {
  const showLog = false;
  const nowPeriod = moment().format('YYYY-MM');

  const results = [];
  const retrySemiTime = 300;
  const reportsNotFound = [];

  const autoAssignArea = (nowDate, areaOpenLists, staffLeaveInToday, staffAutoStopInToDay, timeRetries) => {
    try {
      const tempStaffWork = [];
      const tempReportAreaNotFound = [];
      areaOpenLists.forEach((areaOpen) => {
        showLog && console.log(`üçª ~ ^^^^^^^^^^^^^^^^^^ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ::: ${areaOpen}  ::: ^^^^^^^^^^^^^^^^^^`);
        const todayStaffWorkIds = tempStaffWork.map((wl) => wl.staffId);
        showLog && console.log(`üçª ~ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß:::`, todayStaffWorkIds);
        showLog &&
          console.log(
            `üìç  ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ `,
            dbStaffArea.filter((staff) => staff.areaId === areaOpen && staff.period === nowPeriod).map((staff) => staff.staffId)
          );

        const areaTime = getAreaTime(areaOpen);
        showLog && console.log(`üçª ~ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ:::`, areaTime);
        const staffNotAvailable = staffLeaveInToday
          .filter((staffLeave) => {
            const isLeaveAnnual = staffLeave.leaveType === 'ANNUAL LEAVE';
            const isLeaveMeeting = staffLeave.leaveType === 'MEETING';
            const isLeaveInAreaTime = staffLeave.leaveTime[1] > areaTime[0] && staffLeave.leaveTime[0] < areaTime[1];

            const isLeaveEqualAreaTime = staffLeave.leaveTime[0] === areaTime[0] && staffLeave.leaveTime[1] === areaTime[1];
            return isLeaveAnnual || (isLeaveMeeting && (isLeaveInAreaTime || isLeaveEqualAreaTime));
          })
          .map((staffLeave) => staffLeave.staffId);

        showLog && console.log(`üí§ ~ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ:::`, staffNotAvailable);

        const staffCanWorkInArea = dbStaffArea
          .filter((staffArea) => staffArea.areaId === areaOpen && staffArea.period === nowPeriod && !staffNotAvailable.includes(staffArea.staffId))
          .map((staffArea) => staffArea.staffId);

        showLog && console.log(`üìç  ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏≤‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà`, staffCanWorkInArea);

        // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ï‡πâ‡∏≠‡∏á 100%
        const candidateStaff = staffCanWorkInArea.filter((staffId) => !todayStaffWorkIds.includes(staffId) && !staffAutoStopInToDay.includes(staffId));

        showLog && console.log(`‚úÖ ~ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢:::`, candidateStaff);

        const theChosenOne = lodash.shuffle(candidateStaff)[0];
        if (!theChosenOne && timeRetries > 0) {
          throw new Error(`‚ùå ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :: ${nowDate} :: ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà :: (${areaOpen}) :: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏•‡∏á‡πÑ‡∏î‡πâ ::`);
        }
        if (!theChosenOne && timeRetries === 0) {
          tempReportAreaNotFound.push({ nowDate, areaOpen, staffCanWorkInArea: staffCanWorkInArea.map((staff) => getVidStaff(staff)) });
        }

        showLog && console.log(`üöô ~ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å :::`, theChosenOne);
        tempStaffWork.push({ areaId: areaOpen, staffId: theChosenOne });
      });

      reportsNotFound.push(...tempReportAreaNotFound);

      return tempStaffWork;
    } catch (error) {
      if (timeRetries >= 0) {
        showLog && console.log(`========  RETRY ${nowDate} ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô (${retrySemiTime - timeRetries}) ========`);
        const resultRetry = autoAssignArea(nowDate, areaOpenLists, staffLeaveInToday, staffAutoStopInToDay, timeRetries - 1);
        return resultRetry;
      } else {
        return [];
      }
    }
  };

  Array(exCludeArea.length)
    .fill('')
    .forEach((_, days) => {
      showLog && console.log(`üçª ~ =================================================:`);
      const nowDate = moment().startOf('months').add(days, 'days').format('YYYY-MM-DD');

      console.log(`üçª ~ nowDate:::`, nowDate);
      const areaOpenLists = dbAreaOpens.find((areaOpen) => areaOpen.date === nowDate).areaIds;

      showLog && console.log(`üçª ~ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î::: ${areaOpenLists}`);

      const staffLeaveInToday = dbStaffLeave.filter((staff) => staff.date === nowDate);

      const staffAutoStopInToDay = autoStopResult
        .map((stop) => {
          const currentDateIsStop = stop.calendar.find((c) => c.isStop && c.date === nowDate);
          if (currentDateIsStop) {
            return stop.staffData.id;
          }
        })
        .filter((staff) => !!staff);

      const tempStaffWork = autoAssignArea(nowDate, areaOpenLists, staffLeaveInToday, staffAutoStopInToDay, retrySemiTime);

      showLog && console.log(`üçª ~ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå::: ${JSON.stringify(tempStaffWork, null, 2)}`);

      // reports
      results.push({
        date: nowDate,
        staffWork: tempStaffWork,
      });
    });

  // !showLog && console.log(`üéÅ ~ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ::: ${JSON.stringify(results, null, 2)}`);
  // console.log('reportsNotFound', reportsNotFound);
  return { results, reportsNotFound };
};
